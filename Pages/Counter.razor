@page "/counter"

@inject IJSRuntime JSRuntime
@inject CompileService CompileService


@code {
    private string csCode { get; set; }
    private string JsCode = "";
    private string ResultText { get; set; }
    private string CompileText { get; set; }
    private int maxCount = 2000;
    private int currentCount = 0;
    private int numA;
    Random rnd = new Random();
    private string example;
    private string quete = "\"";


    private async Task Run()
    {
        if (JsCode != "")
        {
            Console.WriteLine("JsCode not null");
            await UpdateJavaScript();
        }
        else if (csCode != null && csCode != "")
        {          
            Console.WriteLine("csCode not null");
            await UpdateCSharp();
        }

    }
    private async Task GenJsMath()
    {
        numA = rnd.Next(1, 101);
        example = "<p id='demo'></p> <script> document.getElementById('demo').innerHTML = liveProgramming(); function liveProgramming() { let number = " + numA + ";  let guess = number / 2;  let precision = 0.0001; while (Math.abs(guess * guess - number) > precision) { guess = (guess + number / guess) / 2; } let sqrt = guess; let result = `Square root of ${number} is ${sqrt}`;  return result;}</script>";
        JsCode = example;

    }
    private async Task GenJsSentence()
    { 
        example = "<p id='demo'></p> <script> document.getElementById('demo').innerHTML = " + quete + Faker.Lorem.Paragraph(10) + quete + "</script>";
        JsCode = example;
    }
    private async Task GenJsSentence20()
    {
        example = "<p id='demo'></p> <script> document.getElementById('demo').innerHTML = " + quete + Faker.Lorem.Paragraph(20) + quete + "</script>";
        JsCode = example;
    }
    private async Task GenCsharpSentence20()
    {
        example = "using System.Text; namespace tester { public class RunClass { public string Run() { var sb = new StringBuilder(); sb.AppendLine(" + quete + Faker.Lorem.Paragraph(20) + quete + ");  return sb.ToString(); } } }";
        csCode = example;
    }
    private async Task GenCsharpSentence()
    {
        example = "using System.Text; namespace tester { public class RunClass { public string Run() { var sb = new StringBuilder(); sb.AppendLine(" + quete + Faker.Lorem.Paragraph(10) +quete + ");  return sb.ToString(); } } }";
        csCode = example;
    }
    private async Task GenCsharpMath()
    {
        numA = rnd.Next(1, 101);
        example = "using System.Text;using System;namespace tester{public class RunClass{public string Run(){double number = " + numA + ";double guess = number / 2;double precision = 0.0001;while (Math.Abs(guess * guess - number) > precision) { guess = (guess + number / guess) / 2; }double sqrt = guess;var sb = new StringBuilder();sb.AppendLine($" + quete + "Square root of {number} is {sqrt}" + quete +");return sb.ToString();}}}";
        csCode = example;
    }
    private async Task AutoRun()
    {
        for (currentCount = 0; currentCount < maxCount; currentCount++)
    {
    await GenJsMath();
    await JSRuntime.InvokeVoidAsync("startTime");
    await Run();
        await JSRuntime.InvokeVoidAsync("endTime");
        await Task.Delay(1000);
        JsCode = "";
        }
        await JSRuntime.InvokeVoidAsync("downloadTimeFile", "JsMath" );

        for (currentCount = 0; currentCount < maxCount; currentCount++)
        {
        await GenJsSentence();
        await JSRuntime.InvokeVoidAsync("startTime");
    await Run();
    await JSRuntime.InvokeVoidAsync("endTime");
    await Task.Delay(1000);
    JsCode = "";
    }
    await JSRuntime.InvokeVoidAsync("downloadTimeFile", "JsSen10");

    for (currentCount = 0; currentCount < maxCount; currentCount++)
        {
        await GenJsSentence20();
        await JSRuntime.InvokeVoidAsync("startTime");
        await Run();
        await JSRuntime.InvokeVoidAsync("endTime");
        await Task.Delay(1000);
    JsCode = "";
    }
    await JSRuntime.InvokeVoidAsync("downloadTimeFile", "JsSen20");
        
        for (currentCount = 0; currentCount < maxCount; currentCount++)
        {
            await GenCsharpSentence();
            await JSRuntime.InvokeVoidAsync("startTime");
            await Run();
            await Task.Delay(1000);
            await JSRuntime.InvokeVoidAsync("endTimeCs");
            csCode = "";
        }
        await JSRuntime.InvokeVoidAsync("downloadTimeFile", "C#Sen10");

        for (currentCount = 0; currentCount < maxCount; currentCount++)
        {
            await GenCsharpSentence20();
            await JSRuntime.InvokeVoidAsync("startTime");
            await Run();
            await Task.Delay(1000);
            await JSRuntime.InvokeVoidAsync("endTimeCs");
            csCode = "";
        }
        await JSRuntime.InvokeVoidAsync("downloadTimeFile", "C#Sen20");

        for (currentCount = 0; currentCount < maxCount; currentCount++)
        { 
            await GenCsharpMath();
            await JSRuntime.InvokeVoidAsync("startTime");
            await Run();
            await Task.Delay(1000);
            await JSRuntime.InvokeVoidAsync("endTimeCs");
            csCode = "";

        }
        await JSRuntime.InvokeVoidAsync("downloadTimeFile", "C#Math");
    }
    private async Task UpdateJavaScript()
    {
        await JSRuntime.InvokeVoidAsync("displayJavaScriptOutput", JsCode);
    }
    public async Task UpdateCSharp()
    {
        try
        {
            CompileService.CompileLog = new List<string>();
            ResultText = await CompileService.CompileAndRun(csCode);
        }
        catch(Exception e)
        {
            CompileService.CompileLog.Add(e.Message);
            CompileService.CompileLog.Add(e.StackTrace);
            throw;

        }
        finally
        {
            CompileText = string.Join("\r\n", CompileService.CompileLog);
            await JSRuntime.InvokeVoidAsync("displayCsharpOutput", ResultText);
            this.StateHasChanged();
        }
    }

}

<textarea id="JavaScripttext" name="javascriptCode" placeholder="JavaScript code" spellcheck="false" @bind="JsCode"></textarea>
    <textarea id="C#" class="C#" name="C#code" placeholder="C# code" spellcheck="false" @bind="csCode"></textarea>
    <button type ="submit" @onclick="Run"> run</button>
    <button type="submit" @onclick="AutoRun"> AutoRun (@currentCount/@maxCount)</button>

<div class="iframe-container split">
    <iframe id="javascriptViewer"></iframe>
    <iframe id="csharpViewer" @bind="ResultText"></iframe>
    <pre>@CompileText</pre>
</div>






